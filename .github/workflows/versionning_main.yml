name: ESP-IDF CI with Versioning

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      receiver_version: ${{ steps.set_versions.outputs.receiver_version }}
      sender_version: ${{ steps.set_versions.outputs.sender_version }}
      build_receiver: ${{ steps.set_versions.outputs.build_receiver }}
      build_sender: ${{ steps.set_versions.outputs.build_sender }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Labels and determine targets
        id: set_versions
        run: |
          echo "Fetching PR labels..."
          labels=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            | jq -r '.[].name')

          echo "Labels: $labels"

          version_type=""
          if echo "$labels" | grep -q "major"; then
            version_type="major"
          elif echo "$labels" | grep -q "minor"; then
            version_type="minor"
          elif echo "$labels" | grep -q "patch"; then
            version_type="patch"
          else
            echo "‚ùå No version type label found (major/minor/patch)"
            exit 1
          fi

          bump_version() {
            component=$1
            latest=$(git tag --list "${component}-v*" --sort=-v:refname | head -n1)
            [ -z "$latest" ] && latest="${component}-v0.0.0"
            clean="${latest#${component}-v}"
            IFS='.' read -r -a parts <<< "$clean"

            case "$version_type" in
              major) new="${component}-v$((parts[0] + 1)).0.0" ;;
              minor) new="${component}-v${parts[0]}.$((parts[1] + 1)).0" ;;
              patch) new="${component}-v${parts[0]}.${parts[1]}.$((parts[2] + 1))" ;;
            esac

            git tag -a "$new" -m "$component version $new"
            git push origin "$new"
            echo "$new"
          }

          build_receiver="false"
          build_sender="false"
          receiver_version=""
          sender_version=""

          if echo "$labels" | grep -q "receiver"; then
            build_receiver="true"
            receiver_version=$(bump_version "receiver")
          fi

          if echo "$labels" | grep -q "sender"; then
            build_sender="true"
            sender_version=$(bump_version "sender")
          fi

          echo "::set-output name=build_receiver::$build_receiver"
          echo "::set-output name=build_sender::$build_sender"
          echo "::set-output name=receiver_version::$receiver_version"
          echo "::set-output name=sender_version::$sender_version"
  build_software_receiver:
    needs: versioning
    if: needs.versioning.outputs.build_receiver == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build ESP32 Software_receiver
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4
          target: esp32
          path: 'Software_receiver'
      - name: Upload Receiver Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Software_receiver-${{ needs.versioning.outputs.receiver_version }}
          path: 'Software_receiver/build/*.bin'

  build_software_sender:
    needs: versioning
    if: needs.versioning.outputs.build_sender == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build ESP32 Software_sender
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4
          target: esp32
          path: 'Software_sender'
      - name: Upload Sender Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Software_sender-${{ needs.versioning.outputs.sender_version }}
          path: 'Software_sender/build/*.bin'
