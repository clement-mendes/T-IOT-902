name: ESP-IDF CI with Versioning

on:
  pull_request:
    branches:
      - "main"
    types:
      - opened
      - synchronize
      - reopened

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Get latest version tag
        id: get_version
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$latest_tag" ]]; then
            latest_tag="v0.0.0"
          fi
          echo "üîπ Latest version: $latest_tag"
          echo "version=$latest_tag" >> $GITHUB_ENV

      - name: Get PR Labels
        id: pr_labels
        run: |
          pr_labels=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            | jq -r '.[].name')
          echo "Labels: $pr_labels"

          # Detect version type based on labels
          if echo "$pr_labels" | grep -q "major"; then
            version_type="major"
          elif echo "$pr_labels" | grep -q "minor"; then
            version_type="minor"
          elif echo "$pr_labels" | grep -q "patch"; then
            version_type="patch"
          else
            echo "‚ùå ERROR: No valid version label found! Please add a 'major', 'minor', or 'patch' label."
            exit 1
          fi

          echo "version_type=$version_type" >> $GITHUB_ENV

      - name: Increment version
        id: bump_version
        run: |
          echo "üîπ Selected version type: ${{ env.version_type }}"  

          old_version="${{ env.version }}"
          echo "üîπ Old version: $old_version"

          if [[ -z "$old_version" ]]; then
            echo "‚ùå ERROR: No previous version found!"
            exit 1
          fi

          clean_version="${old_version//v/}"
          IFS='.' read -r -a parts <<< "$clean_version"

          case "$version_type" in
            major)
              new_version="$((parts[0] + 1)).0.0"
              ;;
            minor)
              new_version="${parts[0]}.$((parts[1] + 1)).0"
              ;;
            patch)
              new_version="${parts[0]}.${parts[1]}.$((parts[2] + 1))"
              ;;
            *)
              echo "‚ùå ERROR: Invalid version type '$version_type'"
              exit 1
              ;;
          esac

          echo "‚úÖ New version: $new_version"
          new_version="v${new_version}"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "::set-output name=new_version::$new_version"

      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Push new Git tag
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "${{ steps.bump_version.outputs.new_version }}" -m "Version ${{ steps.bump_version.outputs.new_version }}"
          git push origin "${{ steps.bump_version.outputs.new_version }}"

  build_software_receiver:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ESP32 Software_receiver
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4
          target: esp32
          path: 'Software_receiver'

      - name: Upload Software_receiver artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Software_receiver-${{ needs.versioning.outputs.new_version }}
          path: 'Software_receiver/build/*.bin'

  build_software_sender:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ESP32 Software_sender
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4
          target: esp32
          path: 'Software_sender'

      - name: Upload Software_sender artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Software_sender-${{ needs.versioning.outputs.new_version }}
          path: 'Software_sender/build/*.bin'
          